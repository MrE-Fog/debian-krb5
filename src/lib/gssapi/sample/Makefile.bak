# Makefile generated by imake - do not edit!
# $XConsortium: imake.c,v 1.51 89/12/12 12:37:30 jim Exp $

# $Source$
# $Author$
# $Id$
#

###########################################################################
# Makefile generated from "Imake.tmpl" and </tmp/IIf.002934>
# $XConsortium: Imake.tmpl,v 1.77 89/12/18 17:01:37 jim Exp $
#
# Platform-specific parameters may be set in the appropriate .cf
# configuration files.  Site-wide parameters may be set in the file
# site.def.  Full rebuilds are recommended if any parameters are changed.
#
# If your C preprocessor doesn't define any unique symbols, you'll need
# to set BOOTSTRAPCFLAGS when rebuilding imake (usually when doing
# "make Makefile", "make Makefiles", or "make World").
#
# If you absolutely can't get imake to work, you'll need to set the
# variables at the top of each Makefile as well as the dependencies at the
# bottom (makedepend will do this automatically).
#

###########################################################################
# platform-specific configuration parameters - edit vaxbsd.cf to change

# $Source$
# $Author$
# $Id$
#

###########################################################################
# site-specific configuration parameters - edit site.def to change

# $Source$
# $Author$
# $Id$
#

# site:  $XConsortium: site.def,v 1.21 89/12/06 11:46:50 jim Exp $

            SHELL = 	/bin/sh

              TOP = ../../../.
      CURRENT_DIR = ./lib/gssapi/sample

               AR = ar cq
  BOOTSTRAPCFLAGS =
               CC = gcc -fstrength-reduce -fpcc-struct-return -pedantic -ansi -Wall -Dunix -Dvax

         COMPRESS = compress
              CPP = /lib/cpp $(STD_CPP_DEFINES)
    PREPROCESSCMD = gcc -fstrength-reduce -fpcc-struct-return -pedantic -ansi -Wall -Dunix -Dvax -E $(STD_CPP_DEFINES)
          INSTALL = install
               LD = ld
      LDLOCATIONS =
             LINT = lint
      LINTLIBFLAG = -C
         LINTOPTS = -axz
               LN = ln -s
             MAKE = make
               MV = mv
               CP = cp
           RANLIB = ranlib
  RANLIBINSTFLAGS =
               RM = rm -f
     STD_INCLUDES =
  STD_CPP_DEFINES =
      STD_DEFINES =
    SABER_DEFINES = -I/mit/gnu/vaxlib/gcc-include -Dconst=
 EXTRA_LOAD_FLAGS = -Z
  EXTRA_LIBRARIES =
             TAGS = ctags
            ETAGS = etags
STDC_TOP_INCLUDES = -I$(TOP)/include/stdc-incl

   SIGNAL_DEFINES = -DSIGNALRETURNSINT

     INSTPGMFLAGS =  -s

     INSTSCRFLAGS =
     INSTBINFLAGS = -m 0755
     INSTUIDFLAGS = -o root -m 4755
     INSTLIBFLAGS = -m 0664
     INSTINCFLAGS = -m 0444
     INSTMANFLAGS = -m 0444
     INSTDATFLAGS = -m 0444
    INSTKMEMFLAGS = -o root -m 4755

          DESTDIR =

     TOP_INCLUDES = -I$(TOP)

      CDEBUGFLAGS = -O
        CCOPTIONS =
      COMPATFLAGS =

      ALLINCLUDES = $(INCLUDES) $(STD_INCLUDES) $(TOP_INCLUDES) $(EXTRA_INCLUDES)
       ALLDEFINES = $(ALLINCLUDES) $(STD_DEFINES) $(PROTO_DEFINES) $(DEFINES) $(COMPATFLAGS)
           CFLAGS = $(CDEBUGFLAGS) $(CCOPTIONS) $(ALLDEFINES)
        LINTFLAGS = $(LINTOPTS) -DLINT $(ALLDEFINES)
           LDLIBS = $(SYS_LIBRARIES) $(EXTRA_LIBRARIES)
        LDOPTIONS = $(CDEBUGFLAGS) $(CCOPTIONS) $(LDLOCATIONS)
   LDCOMBINEFLAGS = -X -r
          MDFLAGS = -D__STDC__ -I/mit/gnu/vaxlib/gcc-include

        MACROFILE = vaxbsd.cf
           RM_CMD = $(RM) *.CKP *.ln *.BAK *.bak *.o core errs ,* *~ *.a .emacs_* tags TAGS make.log MakeOut

    IMAKE_DEFINES =

         IRULESRC = $(CONFIGSRC)

        IMAKE_CMD = $(IMAKE) -I$(NEWTOP)$(IRULESRC) $(IMAKE_DEFINES)

     ICONFIGFILES = $(IRULESRC)/Imake.tmpl $(IRULESRC)/Imake.rules \
			$(IRULESRC)/Project.tmpl $(IRULESRC)/site.def \
			$(IRULESRC)/$(MACROFILE) $(EXTRA_ICONFIGFILES)

# Kerberos version 5 Build Parameters
#
# $Source$
# $Author$
# $Id$

P_TERMIOS=-UHasPosixTermiosTrue

P_FLOCKS=-UHasPosixFileLocksTrue

P_TYPES=-UHasPosixTypesTrue

P_SIGTYPE=-UHasVoidSignalReturnTrue

P_STRINGH=-DHasStringHTrue

P_BITSIZE=-DBitsize32 -UBitsize16 -UBitsize64

P_DBM=-DHasNdbmTrue

P_INET=-DHasInetTrue

P_STDLIBH=-UHasStdlibHTrue -UForceStdlibH

P_TIME_DEFS=-DUseSysTimeH -UUseTimeH

P_PROTOS=-UProvidePrototypes

P_NPROTO=-UUseNarrowPrototypes

P_STDARG=-UUseStdarg

            ARADD = ar cruv
     TOP_INCLUDES = -I$(TOP)/include $(STDC_TOP_INCLUDES)
        CONFIGSRC = $(TOP)/config
            ISODE = /mit/isode/isode-6.8
         PSYFLAGS = -f -h0 -a -s
            PEPSY = $(ISODE)/@sys/bin/pepsy
            TOUCH = touch
            IMAKE = imake
           DEPEND = makedepend
          UNIFDEF = unifdef
          HESDEFS = -DHESIOD
          HESLIBS = -lhesiod

  PROCESS_DEFINES = $(P_TERMIOS) $(P_FLOCKS) $(P_TYPES) $(P_SIGTYPE) $(P_STRINGH) $(P_BITSIZE) $(P_DBM) $(P_INET) $(P_STDLIBH) $(P_TIME_DEFS) $(P_PROTOS) $(P_NPROTO) $(P_STDARG) -DUnifdefRan
       DESDEFINES = -DBIG -DLSBFIRST
          TOPLIBD = $(TOP)/lib
            OSLIB = os
         OSDEPLIB = $(TOPLIBD)/libos.a
           DESLIB = des5
        DESDEPLIB = $(TOPLIBD)/libdes5.a
        RSAMD4LIB = md4
     RSAMD4DEPLIB = $(TOPLIBD)/libmd4.a
          KRB5LIB = krb5
       KRB5DEPLIB = $(TOPLIBD)/libkrb5.a
           CRCLIB = crc32
        CRCDEPLIB = $(TOPLIBD)/libcrc32.a
         ISODELIB = -L/mit/isode/isode-6.8/@sys/lib -lisode

           DBMLIB =
          DEPKLIB = $(KRB5DEPLIB) $(DESDEPLIB) $(OSDEPLIB)
          KLIBLOC = -L$(TOPLIBD)
             KLIB = $(KLIBLOC) -l$(KRB5LIB) -l$(DESLIB) -l$(OSLIB) $(ISODELIB) $(COMERRLIB) $(DBMLIB)
        KDBDEPLIB = $(TOPLIBD)/libkdb.a
           KDBLIB = $(KLIBLOC) -lkdb
     KRB425DEPLIB = $(TOPLIBD)/libkrb425.a
        KRB425LIB = krb425
     DES425DEPLIB = $(TOPLIBD)/libdes425.a
        DES425LIB = des425
          KRB4LIB = -lkrb $(KLIBLOC) -l$(DES425LIB)
     KRB4INCLUDES = -I$(TOP)/include/kerberosIV
       KRB4DEPLIB = $(DES425DEPLIB)

            SSLIB = -lss
          MK_CMDS = mk_cmds
        COMERRLIB = -lcom_err
       COMPILE_ET = compile_et

     ADMIN_BINDIR = /krb5/admin
  ADMIN_MANSUFFIX = 8
     ADMIN_MANDIR = /krb5/man/man8
    SERVER_BINDIR = /krb5/sbin
 SERVER_MANSUFFIX = 8
    SERVER_MANDIR = /krb5/man/man8
    CLIENT_BINDIR = /krb5/bin
 CLIENT_MANSUFFIX = 1
    CLIENT_MANDIR = /krb5/man/man1

# $Source$
# $Author$
# $Id$
#

###########################################################################
# Imake rules for building libraries, programs, scripts, and data files
# rules:  $XConsortium: Imake.rules,v 1.67 89/12/18 17:14:15 jim Exp $

###########################################################################
# start of Imakefile

#	$Source$
#	$Author$
#	$Id$
#
#  Copyright 1991 by the Massachusetts Institute of Technology.
#  All Rights Reserved.
#
#  For copying and distribution information, please see the file
#  <krb5/copyright.h>.
#

        DEPLIBS = $(DEPKLIB) ../libgssapi.a
LOCAL_LIBRARIES = $(KLIB) ../libgssapi.a
        DEFINES = -DDEBUG

SRCS = flogin.c fcmd.c flogind.c fsh.c fcp.c login.c logutil.c
OBJS = flogin.o fcmd.o flogind.o fsh.o fcp.o login.o logutil.o

FLOGINSRCS = flogin.c fcmd.c
FLOGINOBJS = flogin.o fcmd.o

LOGINSRCS = login.c logutil.c
LOGINOBJS = login.o logutil.o

FLOGINDSRCS = flogind.c logutil.c
FLOGINDOBJS = flogind.o logutil.o

FSHSRCS = fsh.c fcmd.c
FSHOBJS = fsh.o fcmd.o

FSHDSRCS = fshd.c
FSHDOBJS = fshd.o

FCPSRCS = fcp.c fcmd.c
FCPOBJS = fcp.o fcmd.o

all:: flogin login.gssapi flogind

flogin: $(FLOGINOBJS) $(DEPLIBS)
	 $(RM) $@
	$(CC) -o $@ $(FLOGINOBJS) $(LDOPTIONS) $(LOCAL_LIBRARIES) $(LDLIBS)  $(EXTRA_LOAD_FLAGS)

clean::
	$(RM) flogin

login.gssapi: $(LOGINOBJS) $(DEPLIBS)
	 $(RM) $@
	$(CC) -o $@ $(LOGINOBJS) $(LDOPTIONS) $(LOCAL_LIBRARIES) $(LDLIBS)  $(EXTRA_LOAD_FLAGS)

clean::
	$(RM) login.gssapi

flogind: $(FLOGINDOBJS) $(DEPLIBS)
	 $(RM) $@
	$(CC) -o $@ $(FLOGINDOBJS) $(LDOPTIONS) $(LOCAL_LIBRARIES) $(LDLIBS)  $(EXTRA_LOAD_FLAGS)

clean::
	$(RM) flogind

fsh: $(FSHOBJS) $(DEPLIBS)
	 $(RM) $@
	$(CC) -o $@ $(FSHOBJS) $(LDOPTIONS) $(LOCAL_LIBRARIES) $(LDLIBS)  $(EXTRA_LOAD_FLAGS)

clean::
	$(RM) fsh

fshd: $(FSHDOBJS) $(DEPLIBS)
	 $(RM) $@
	$(CC) -o $@ $(FSHDOBJS) $(LDOPTIONS) $(LOCAL_LIBRARIES) $(LDLIBS)  $(EXTRA_LOAD_FLAGS)

clean::
	$(RM) fshd

fcp: $(FCPOBJS) $(DEPLIBS)
	 $(RM) $@
	$(CC) -o $@ $(FCPOBJS) $(LDOPTIONS) $(LOCAL_LIBRARIES) $(LDLIBS)  $(EXTRA_LOAD_FLAGS)

clean::
	$(RM) fcp

saber_flogin:
	#load $(ALLDEFINES)  $(FLOGINSRCS)   	$(DEPLIBS) $(LOCAL_LIBRARIES) $(SYS_LIBRARIES) $(EXTRA_LIBRARIES)

osaber_flogin:
	#load $(ALLDEFINES)  $(FLOGINOBJS)
	$(DEPLIBS) $(LOCAL_LIBRARIES) $(SYS_LIBRARIES) $(EXTRA_LIBRARIES)

saber_login.gssapi:
	#load $(ALLDEFINES)  $(LOGINSRCS)   	$(DEPLIBS) $(LOCAL_LIBRARIES) $(SYS_LIBRARIES) $(EXTRA_LIBRARIES)

osaber_login.gssapi:
	#load $(ALLDEFINES)  $(LOGINOBJS)
	$(DEPLIBS) $(LOCAL_LIBRARIES) $(SYS_LIBRARIES) $(EXTRA_LIBRARIES)

saber_flogind:
	#load $(ALLDEFINES)  $(FLOGINDSRCS)   	$(DEPLIBS) $(LOCAL_LIBRARIES) $(SYS_LIBRARIES) $(EXTRA_LIBRARIES)

osaber_flogind:
	#load $(ALLDEFINES)  $(FLOGINDOBJS)
	$(DEPLIBS) $(LOCAL_LIBRARIES) $(SYS_LIBRARIES) $(EXTRA_LIBRARIES)

saber_fsh:
	#load $(ALLDEFINES)  $(FSHSRCS)   	$(DEPLIBS) $(LOCAL_LIBRARIES) $(SYS_LIBRARIES) $(EXTRA_LIBRARIES)

osaber_fsh:
	#load $(ALLDEFINES)  $(FSHOBJS)
	$(DEPLIBS) $(LOCAL_LIBRARIES) $(SYS_LIBRARIES) $(EXTRA_LIBRARIES)

saber_fshd:
	#load $(ALLDEFINES)  $(FSHDSRCS)   	$(DEPLIBS) $(LOCAL_LIBRARIES) $(SYS_LIBRARIES) $(EXTRA_LIBRARIES)

osaber_fshd:
	#load $(ALLDEFINES)  $(FSHDOBJS)
	$(DEPLIBS) $(LOCAL_LIBRARIES) $(SYS_LIBRARIES) $(EXTRA_LIBRARIES)

saber_fcp:
	#load $(ALLDEFINES)  $(FCPSRCS)   	$(DEPLIBS) $(LOCAL_LIBRARIES) $(SYS_LIBRARIES) $(EXTRA_LIBRARIES)

osaber_fcp:
	#load $(ALLDEFINES)  $(FCPOBJS)
	$(DEPLIBS) $(LOCAL_LIBRARIES) $(SYS_LIBRARIES) $(EXTRA_LIBRARIES)

SRCS=$(SERVERSRCS) $(CLIENTSRCS)

depend::
	$(DEPEND) -s "# DO NOT DELETE" -- $(ALLDEFINES) $(MDFLAGS) -- $(SRCS)

###########################################################################
# common rules for all Makefiles - do not edit

emptyrule::

clean::
	$(RM_CMD) \#*

Makefile:: Imakefile
	$(IMAKE_CMD) -DTOPDIR=$(TOP) -DCURDIR=$(CURRENT_DIR)   -s Makefile.new
	$(MAKE) -f Makefile.new noop
	-@if [ -f Makefile ]; then \
		echo "$(RM) Makefile.bak; $(MV) Makefile Makefile.bak"; \
		$(RM) Makefile.bak; $(MV) Makefile Makefile.bak; \
	fi
	$(MV) Makefile.new Makefile

noop::

tags::
	$(TAGS) -w *.[ch]
	$(ETAGS) *.[ch]

saber:
	#load $(ALLDEFINES) $(SABER_DEFINES) $(SRCS)
	#setopt load_flags $(ALLDEFINES) $(SABER_DEFINES)

osaber:
	#load $(ALLDEFINES) $(OBJS)

###########################################################################
# empty rules for directories that do not have SUBDIRS - do not edit

install::
	@echo "install in $(CURRENT_DIR) done"

install.man::
	@echo "install.man in $(CURRENT_DIR) done"

Makefiles::

includes::

###########################################################################
# dependencies generated by makedepend

# DO NOT DELETE
