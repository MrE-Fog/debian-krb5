Received: by E40-PO.MIT.EDU (5.45/4.7) id AA17675; Fri, 24 May 91 14:58:47 EDT
Received: from uucp-gw-1.pa.dec.com by ATHENA.MIT.EDU with SMTP
	id AA18573; Fri, 24 May 91 14:58:33 EDT
Received: by uucp-gw-1.pa.dec.com; id AA01785; Fri, 24 May 91 11:56:31 -0700
Received: by sejour.lkg.dec.com (5.57/Ultrix4.0)
	id AA15569; Fri, 24 May 91 15:00:01 -0400
Message-Id: <9105241900.AA15569@sejour.lkg.dec.com>
To: tytso@ATHENA.MIT.EDU
Cc: kannan@sejour.lkg.dec.com
Subject: GSS API for SPX ready for testing
Date: Fri, 24 May 91 15:00:00 EDT
From: kannan@sejour.lkg.dec.com

Ted,

I have completed the initial implementation of the GSS API for the SPX
mechanism and I've modified the flogin program to use this new
interface.  My "standard" GSS library includes the following routines:

/*
 * Offering "standard" GSS API for following mechanism(s) :  SPX
 *
 * Supported jacket routines :
 *
 *     gss_acquire_cred             Assume a global identity
 *
 *     gss_release_cred             Discard credentials
 *
 *     gss_init_sec_context         Initiate a security context with a
 *                                  peer application
 *
 *     gss_accept_sec_context       Accept a security context from a
 *                                  peer application
 *
 *     gss_display_status           Convert an API status code to text
 *
 *     gss_indicate_mechs           Determine underlying mechanism
 *
 *     gss_display_name             Convert opaque name to text
 *
 *     gss_import_name              Convert a textual name to API-format
 *
 *     gss_release_name             Deallocate API internal name
 *
 *     gss_release_buffer           Deallocate a buffer descriptor
 *
 *     gss_release_oid_set          Deallocate a set of object identifiers
 *
 * Unofficial jacket routines :
 *
 *     gss__stash_default_cred      Bind credential handle as default
 *
 *     gss__check_authorization     Check authorization rights for principal
 *
 */

As you can tell, I have two unofficial routines referred to as "gss__"
instead of "gss_".

The first, gss__stash_default_cred will set the specified credential as
the default for a process.  After calling this routine, GSS_C_NULL_CREDENTIAL
can be used by the calling application to reference the stashed credentials.
Note, if GSS_C_NULL_CREDENTIAL is passed to this routine, success is returned.

/*
 * WARNING:  UNOFFICIAL GSSAPI ROUTINE!!
 *
 * gss__stash_default_cred() - Allows remote peer to bind delegated credential
 *   handle with remote application.  Called by applications to set the
 *   delegated credentials as the default credentials for a process.
 *
 *   OM_uint32    *minor_status  (output) - mechanism specific status code
 *   gss_cred_id_t delegated_cred_handle (input) - handle for credentials
 *                                         received from context initiator.
 *
 */

The second, gss__check_authorization is a bit more controversial.  This
routine will check access rights for a principal against an ACL file.
I've added a few additional arguments to make this routine more robust
so that access control decisions can be based on a per service and
possible per resource basis.

/*
 * WARNING:  UNOFFICIAL GSSAPI ROUTINE!!
 *
 * gss__check_authorization() - Check authorization rights for principal
 *   using the ACL file specified.
 *
 *   OM_uint32    *minor_status  (output) - mechanism specific status code
 *   gss_buffer_t fullname_buffer (input) - principal's printable name
 *   gss_buffer_t luser_buffer   (input)  - local user name
 *   gss_buffer_t acl_file_buffer (input) - acl file name
 *   gss_buffer_t service_buffer (input)  - service name
 *   int          access_mode    (input)  - type of access (rwx, etc.)
 *   gss_buffer_t resource_buffer (input) - resource name
 *
 */

I've also defined 3 unofficial constants to describe the access modes.

#define GSS_C_READ       (1 << 0)
#define GSS_C_WRITE      (1 << 1)
#define GSS_C_EXECUTE    (1 << 2)

You look at the application source code to see how these routines are
being used.  The next message will contain the following files:

	- Makefile, flogin.c fcmd.c flogind.c login.c

Talk to you later.

	-kannan

