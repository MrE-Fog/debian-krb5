CFLAGS  =	$(CCOPTS) $(DEFS) $(LOCALINCLUDE) -DUSE_KADM5_API_VERSION=1

all:: init-test destroy-test client-handle-test client-iter-test
all:: randkey-test server-handle-test lock-test server-iter-test 

#
# The client-side test programs.
#

init-test: init-test.o client_init.o $(CLNTDEPLIPS)
	$(LD) $(LDFLAGS) $(LDARGS) -o init-test init-test.o client_init.o \
		$(CLNTLIBS)

client_init.o: $(SRCTOP)/lib/kadm5/clnt/client_init.c
	$(CC) $(CFLAGS) -DUSE_KADM5_API_VERSION=2 -DINIT_TEST -c -I$(SRCTOP)/lib/kadm5 $(SRCTOP)/lib/kadm5/clnt/client_init.c

destroy-test: destroy-test.o $(CLNTDEPLIBS)
	$(LD) $(LDFLAGS) $(LDARGS) -o destroy-test destroy-test.o $(CLNTLIBS)

client-handle-test: handle-test.o $(CLNTDEPLIBS)
	$(LD) $(LDFLAGS) $(LDARGS) -o client-handle-test handle-test.o \
		$(CLNTLIBS)

client-iter-test: iter-test.o $(CLNTDEPLIBS)
	$(LD) $(LDFLAGS) $(LDARGS) -o client-iter-test iter-test.o \
		$(CLNTLIBS)

#
# The server-side test programs.
#

randkey-test: randkey-test.o $(SRVDEPLIBS)
	$(LD) $(LDFLAGS) $(LDARGS) -o randkey-test randkey-test.o $(SRVLIBS)

server-handle-test: handle-test.o $(SRVDEPLIBS)
	$(LD) $(LDFLAGS) $(LDARGS) -o server-handle-test handle-test.o \
		$(SRVLIBS)

lock-test: lock-test.o $(SRVDEPLIBS)
	$(LD) $(LDFLAGS) $(LDARGS) -o lock-test lock-test.o $(SRVLIBS)

server-iter-test: iter-test.o $(SRVDEPLIBS)
	$(LD) $(LDFLAGS) $(LDARGS) -o server-iter-test iter-test.o $(SRVLIBS)

#
# The unit-test targets
#

check:: check-@RUNTEST@-@DO_TCL@

check-- check-runtest- check--tcl::
	@echo "Either tcl or runtest is unavailable. Kadm5 unit tests not run"

check-runtest-tcl unit-test:: unit-test-client unit-test-server

unit-test-client: unit-test-client-setup unit-test-client-body \
	unit-test-client-cleanup

unit-test-server: unit-test-server-setup unit-test-server-body \
	unit-test-server-cleanup

test-randkey:: randkey-test
	$(ENV_SETUP) ./randkey-test

test-handle-server:: server-handle-test
	$(ENV_SETUP) ./server-handle-test

test-handle-client:: client-handle-test
	$(ENV_SETUP) ./client-handle-test

test-noauth: init-test
	$(ENV_SETUP) ./init-test

test-destroy: destroy-test
	$(ENV_SETUP) ./destroy-test

unit-test-client-setup::
	$(ENV_SETUP) $(START_SERVERS)

unit-test-client-cleanup::
	$(ENV_SETUP) $(STOP_SERVERS)

unit-test-server-setup::
	$(ENV_SETUP) $(START_SERVERS_LOCAL)

unit-test-server-cleanup::
	$(ENV_SETUP) $(STOP_SERVERS_LOCAL)

unit-test-client-body: capi.0 capi.2 site.exp test-noauth test-destroy test-handle-client 
	$(ENV_SETUP) $(RUNTEST) --tool capi API=$(CLNTTCL) KINIT=$(BUILDTOP)/clients/kinit/kinit KDESTROY=$(BUILDTOP)/clients/kdestroy/kdestroy KADMIN_LOCAL=$(BUILDTOP)/kadmin/cli/kadmin.local RPC=1

#
# This is unfortunate.  We want to have a single set of directories
# api.* but treat them as two separate tools (capi and sapi).  We
# specify --srcdir in $(RUNTEST) so that unit tests files do not need
# to exist as symlinks in the source tree.  However, we can't check in
# the capi and sapi symlinks into CVS.  Therefore, we need to create
# them *in the source tree* at run time.
#
# Another alternative would be to run $(RUNTEST) without --srcdir in
# this one directory, or just stop using a separate tool name for
# client and server tests; that would prevent us from keeping the
# separate log files around, and might bite us in the future.
#
capi.0: $(srcdir)/api.0
	-rm -f $(srcdir)/capi.0
	ln -s $(srcdir)/api.0 $(srcdir)/capi.0

capi.2: $(srcdir)/api.2
	-rm -f $(srcdir)/capi.2
	ln -s $(srcdir)/api.2 $(srcdir)/capi.2

sapi.0: $(srcdir)/api.0
	-rm -f $(srcdir)/sapi.0
	ln -s $(srcdir)/api.0 $(srcdir)/sapi.0

sapi.1: $(srcdir)/api.1
	-rm -f $(srcdir)/sapi.1
	ln -s $(srcdir)/api.1 $(srcdir)/sapi.1

sapi.2: $(srcdir)/api.2
	-rm -f $(srcdir)/sapi.2
	ln -s $(srcdir)/api.2 $(srcdir)/sapi.2

unit-test-server-body: sapi.0 sapi.1 sapi.2 site.exp randkey-test test-handle-server lock-test 
	$(ENV_SETUP) $(RUNTEST) --tool sapi API=$(SRVTCL) LOCKTEST=./lock-test KADMIN_LOCAL=$(BUILDTOP)/kadmin/cli/kadmin.local RPC=0

clean::
	$(RM) init-test client_init.o init-test.o
	$(RM) destroy-test destroy-test.o
	$(RM) client-handle-test handle-test.o
	$(RM) client-iter-test iter-test.o
	$(RM) randkey-test randkey-test.o
	$(RM) server-handle-test handle-test.o
	$(RM) lock-test lock-test.o
	$(RM) server-iter-test iter-test.o
	$(RM) *.log *.plog *.sum *.psum unit-test-log.*
