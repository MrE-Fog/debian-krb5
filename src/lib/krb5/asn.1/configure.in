AC_INIT(configure.in)
WITH_CCOPTS
WITH_CPPOPTS dnl since we're not doing CONFIG_RULES
WITH_CC dnl since we're not doing CONFIG_RULES
dnl CONFIG_RULES
AC_SET_BUILDTOP
SubdirLibraryRule([${OBJS}])
AC_ARG_ENABLE([isode],[build and use ISODE to generate ASN.1 stubs],[
UsePepsy
PepsyTarget(KRB5)
ISODEMAKEFILE=Makefile.isode],[
ISODEMAKEFILE=Makefile.sane
PEPSY='@echo'
PSYFLAGS='not using pepsy'
AC_SUBST(PEPSY)dnl
AC_SUBST(PSYFLAGS)dnl
])
AC_SUBST(ISODEMAKEFILE)
CopyHeader(KRB5-types.h,[$(EHDRDIR)])
CopyHeader(KRB5_defs.h,[$(EHDRDIR)])
CopyHeader(KRB5_pre_defs.h,[$(EHDRDIR)])
Krb5InstallHeaders(KRB5_defs.h KRB5_pre_defs.h KRB5-types.h, [$(KRB5_INCDIR)/krb5/asn.1])
dnl
dnl ok this is broken but necessary because we're using autoconf
dnl ...and we can't conditionalize the generation of make rules
dnl
CopySrcHeader(krb5_encode.h,[$(EHDRDIR)])
CopySrcHeader(krb5_decode.h,[$(EHDRDIR)])
Krb5InstallHeaders(krb5_encode.h krb5_decode.h, [$(KRB5_INCDIR)/krb5/asn.1])
KRB_INCLUDE
ISODE_INCLUDE
WITH_KRB5ROOT
EXTRA_RULES_OUT(includes.out)
AC_OUTPUT(pre.out:[$]ac_prepend Makefile.out:Makefile.in post.out:[$]ac_postpend Makefile.isode.out:Makefile.isode.in Makefile.sane.out:Makefile.sane.in,
	,
	[cat pre.out Makefile.out post.out > Makefile; cat pre.out [$]{ISODEMAKEFILE}.out post.out includes.out > [$]{ISODEMAKEFILE}])
