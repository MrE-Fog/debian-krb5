thisconfigdir=./../..
myfulldir=util/dyn
mydir=util/dyn
MY_SUBDIRS=.
BUILDTOP=$(REL)$(U)$(S)$(U)
RELDIR=../util/dyn

##DOSBUILDTOP = ..\..
##DOSLIBNAME=libdyn.lib

SRCS = $(srcdir)/dyn_create.c \
	$(srcdir)/dyn_put.c \
	$(srcdir)/dyn_debug.c \
	$(srcdir)/dyn_delete.c \
	$(srcdir)/dyn_size.c \
	$(srcdir)/dyn_append.c \
	$(srcdir)/dyn_realloc.c \
	$(srcdir)/dyn_paranoid.c \
	$(srcdir)/dyn_insert.c \
	$(srcdir)/dyn_initzero.c

OBJS = dyn_create.$(OBJEXT) \
	dyn_put.$(OBJEXT) \
	dyn_debug.$(OBJEXT) \
	dyn_delete.$(OBJEXT) \
	dyn_size.$(OBJEXT) \
	dyn_append.$(OBJEXT) \
	dyn_realloc.$(OBJEXT) \
	dyn_paranoid.$(OBJEXT) \
	dyn_insert.$(OBJEXT) \
	dyn_initzero.$(OBJEXT)

STLIBOBJS=$(OBJS)
STOBJLISTS=OBJS.ST
LIB=dyn
LIBMAJOR=1
LIBMINOR=0


all-unix:: all-liblinks
clean-unix:: clean-liblinks clean-libs clean-libobjs
install-unix:: install-libs
all-mac:: $(OBJS)
all-windows:: $(OBJS)

all-unix:: includes

includes:: dyn.h
	if cmp $(srcdir)/dyn.h \
	$(BUILDTOP)/include/dyn.h >/dev/null 2>&1; then :; \
	else \
		(set -x; $(RM) $(BUILDTOP)/include/dyn.h; \
		 $(CP) $(srcdir)/dyn.h \
			$(BUILDTOP)/include/dyn.h) ; \
	fi

clean-unix::
	$(RM) $(BUILDTOP)/include/dyn.h test.o dyntest

check-unix:: dyntest
	./dyntest

dyntest: test.o $(OBJS)
	$(CC) -o dyntest test.o $(OBJS)

check-windows::
clean-mac::
clean-windows::

# /u1/kr/lclint-2.5m/bin/lclint -warnposix -D__sparc
LCLINT=lclint
# +posixlib	gets more complete errno list than ansilib
# -usedef	turns off bogus warnings from poor dataflow analysis (should be
#		redundant with gcc warnings anyways)
# -warnposix
# +charintliteral
# +ignoresigns
# -predboolint
# -exportlocal
# -retvalint	allow ignoring of int return values (e.g., fputs)
LCLINTOPTS=+posixlib \
	+ignoresigns -predboolint \
	+mod-uncon +modinternalstrict +modfilesys \
	-expect 2

do-lclint: $(SRCS)
	$(LCLINT) $(LCLINTOPTS) $(LOCALINCLUDES) $(DEFS) $(SRCS) $(srcdir)/test.c
# +++ Dependency line eater +++
# 
# Makefile dependencies follow.  This must be the last section in
# the Makefile.in file
#
dyn_create.so dyn_create.po $(OUTPRE)dyn_create.$(OBJEXT): dyn_create.c dynP.h \
  dyn.h
dyn_put.so dyn_put.po $(OUTPRE)dyn_put.$(OBJEXT): dyn_put.c dynP.h dyn.h
dyn_debug.so dyn_debug.po $(OUTPRE)dyn_debug.$(OBJEXT): dyn_debug.c dynP.h dyn.h
dyn_delete.so dyn_delete.po $(OUTPRE)dyn_delete.$(OBJEXT): dyn_delete.c dynP.h \
  dyn.h
dyn_size.so dyn_size.po $(OUTPRE)dyn_size.$(OBJEXT): dyn_size.c dynP.h dyn.h
dyn_append.so dyn_append.po $(OUTPRE)dyn_append.$(OBJEXT): dyn_append.c dynP.h \
  dyn.h
dyn_realloc.so dyn_realloc.po $(OUTPRE)dyn_realloc.$(OBJEXT): dyn_realloc.c dynP.h \
  dyn.h
dyn_paranoid.so dyn_paranoid.po $(OUTPRE)dyn_paranoid.$(OBJEXT): dyn_paranoid.c dynP.h \
  dyn.h
dyn_insert.so dyn_insert.po $(OUTPRE)dyn_insert.$(OBJEXT): dyn_insert.c dynP.h \
  dyn.h
dyn_initzero.so dyn_initzero.po $(OUTPRE)dyn_initzero.$(OBJEXT): dyn_initzero.c dynP.h \
  dyn.h

